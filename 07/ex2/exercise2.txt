Comparing Compiler Output with Code:

Compile the Program:
gcc -O2 -ftree-vectorize -fopt-info-vec-all-internals -o analysis analysis.c

Flags meaning:
`-O2`: This option tells GCC to optimize the code with a moderate level of optimization that includes most optimizations that do not involve a space-speed tradeoff.
`-ftree-vectorize`: This flag enables vectorization of loops to improve performance, applicable when vector hardware (like SIMD) is available.
`-fopt-info-vec-all-internals`: This option enables detailed reporting about what the vectorizer is doing, including why certain loops were or were not vectorized.

Compliler Analysis:

Loop 1 (Initialization):

for(int i = 0; i < SIZE; ++i) {
    a[i] = argc;
}

Compiler Output: This loop at `analysis.c:10` was successfully vectorized. 
Explanation: The loop has a simple structure with an induction variable `i` and a constant value `argc` being assigned to each element of `a`. There are no dependencies or aliasing issues, making it ideal for vectorization.

Loop 2 (Copying):

for(int i = 0; i < SIZE; ++i) {
    b[i] = a[i];
}

Compiler Output: This loop is not explicitly mentioned in the output, but the comment indicates a missed vectorization opportunity due to multiple data references in the statement: `MEM <unsigned char[4096]> [(char * {ref-all})&b] = MEM <unsigned char[4096]> [(char * {ref-all})&a];`
Explanation: Although the loop structure is simple, the compiler might have difficulty vectorizing it due to potential aliasing between arrays `a` and `b`. It cannot guarantee that the memory regions of `a` and `b` do not overlap, which could lead to incorrect results if vectorized.

Loop 3 (Shifting):

for(int i = 4; i < SIZE; ++i) {
    a[i-4] = a[i];
}

Compiler Output: This loop is not explicitly mentioned, but the comment points to a missed vectorization opportunity due to the `__builtin_memmove` call used to optimize the loop.
Explanation: While the loop itself might be vectorizable, the compiler's optimization using `__builtin_memmove` likely prevents further vectorization analysis. 

Loop 4 (Modulo Access):

for(int i = 1; i < SIZE-1; ++i) {
    a[i] = a[i%argc];
}

Compiler Output: This loop at `analysis.c:22` failed to vectorize due to "bad data dependence."
Explanation: The access pattern `a[i%argc]` creates a potential dependence issue. The compiler cannot guarantee that different elements of the vector will access distinct memory locations, leading to potential data races and incorrect results if vectorized.

Loop 5 (Output):

for(int i = 0; i < SIZE; ++i) {
    printf("%d ", a[i]);
    printf("%d ", b[i]);
}

Compiler Output: This loop at `analysis.c:27` failed to vectorize due to the presence of `printf` calls.
Explanation: The `printf` function call within the loop clobbers memory, making it difficult to analyze dependencies and hindering vectorization.

Compiler Output:
gcc -O2 -ftree-vectorize -fopt-info-vec-all-internals -o analysis analysis.c

Analyzing loop at analysis.c:27
analysis.c:27:26: note:  === analyze_loop_nest ===
analysis.c:27:26: note:   === vect_analyze_loop_form ===
analysis.c:27:26: note:    === get_loop_niters ===
analysis.c:28:17: missed:  statement clobbers memory: printf ("%d ", _6);
analysis.c:27:26: missed:  not vectorized: loop contains function calls or data references that cannot be analyzed
analysis.c:27:26: note:  ***** Analysis  failed with vector mode VOID
analysis.c:27:26: note:  ***** The result for vector mode V16QI would be the same
analysis.c:27:26: note:  ***** The result for vector mode V8QI would be the same
analysis.c:27:26: note:  ***** The result for vector mode V4QI would be the same
analysis.c:27:26: missed: couldn't vectorize loop
analysis.c:28:17: missed: statement clobbers memory: printf ("%d ", _6);

Analyzing loop at analysis.c:22
analysis.c:22:26: note:  === analyze_loop_nest ===
analysis.c:22:26: note:   === vect_analyze_loop_form ===
analysis.c:22:26: note:    === get_loop_niters ===
analysis.c:23:25: missed:  failed: evolution of offset is not affine.
analysis.c:22:26: note:   === vect_analyze_data_refs ===
analysis.c:22:26: note:   got vectype for stmt: _5 = a[_4];
vector(4) int
analysis.c:22:26: note:   got vectype for stmt: a[i_47] = _5;
vector(4) int
analysis.c:22:26: note:   === vect_analyze_scalar_cycles ===
analysis.c:22:26: note:   Analyze phi: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   Access function of PHI: {1, +, 1}_4
analysis.c:22:26: note:   step: 1,  init: 1
analysis.c:22:26: note:   Detected induction.
analysis.c:22:26: note:   Analyze phi: .MEM_55 = PHI <.MEM_26(14), .MEM_11(12)>
analysis.c:22:26: note:   Analyze phi: ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>
analysis.c:22:26: note:   Access function of PHI: {1022, +, 4294967295}_4
analysis.c:22:26: note:   step: 4294967295,  init: 1022
analysis.c:22:26: note:   Detected induction.
analysis.c:22:26: note:   === vect_determine_precisions ===
analysis.c:22:26: note:   ivtmp_52 has no range info
analysis.c:22:26: note:   i_27 has range [0x2, 0x3ff]
analysis.c:22:26: note:   can narrow to unsigned:10 without loss of precision: i_27 = i_47 + 1;
analysis.c:22:26: note:   _5 has no range info
analysis.c:22:26: note:   _4 has range [0x0, 0x3fe]
analysis.c:22:26: note:   i_47 has range [0x1, 0x3ff]
analysis.c:22:26: note:   argc_25(D) has no range info
analysis.c:22:26: note:   === vect_pattern_recog ===
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   vect_is_simple_use: operand ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>, type of def: induction
analysis.c:22:26: note:   === vect_analyze_data_ref_accesses ===
analysis.c:22:26: note:   === vect_mark_stmts_to_be_vectorized ===
analysis.c:22:26: note:   init: phi relevant? i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   init: phi relevant? .MEM_55 = PHI <.MEM_26(14), .MEM_11(12)>
analysis.c:22:26: note:   init: phi relevant? ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>
analysis.c:22:26: note:   init: stmt relevant? _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   init: stmt relevant? _5 = a[_4];
analysis.c:22:26: note:   init: stmt relevant? a[i_47] = _5;
analysis.c:22:26: note:   vec_stmt_relevant_p: stmt has vdefs.
analysis.c:22:26: note:   mark relevant 5, live 0: a[i_47] = _5;
analysis.c:22:26: note:   init: stmt relevant? i_27 = i_47 + 1;
analysis.c:22:26: note:   init: stmt relevant? ivtmp_52 = ivtmp_54 - 1;
analysis.c:22:26: note:   init: stmt relevant? if (ivtmp_52 != 0)
analysis.c:22:26: note:   worklist: examine stmt: a[i_47] = _5;
analysis.c:22:26: note:   vect_is_simple_use: operand a[_4], type of def: internal
analysis.c:22:26: note:   mark relevant 5, live 0: _5 = a[_4];
analysis.c:22:26: note:   worklist: examine stmt: _5 = a[_4];
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 % argc_25(D), type of def: internal
analysis.c:22:26: note:   mark relevant 5, live 0: _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   worklist: examine stmt: _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   mark relevant 5, live 0: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   vect_is_simple_use: operand argc_25(D), type of def: external
analysis.c:22:26: note:   worklist: examine stmt: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 + 1, type of def: internal
analysis.c:22:26: note:   induction value on backedge.
analysis.c:22:26: note:   vect_is_simple_use: operand 1, type of def: constant
analysis.c:22:26: note:   === vect_analyze_data_ref_dependences ===
analysis.c:23:25: missed:   possible alias involving gather/scatter between a[_4] and a[i_47]
analysis.c:22:26: missed:  bad data dependence.
analysis.c:22:26: note:  ***** Analysis  failed with vector mode V4SI
analysis.c:22:26: note:  ***** The result for vector mode V16QI would be the same
analysis.c:22:26: note:  ***** Re-trying analysis with vector mode V8QI
analysis.c:22:26: note:   === vect_analyze_data_refs ===
analysis.c:22:26: note:   got vectype for stmt: _5 = a[_4];
vector(2) int
analysis.c:22:26: note:   got vectype for stmt: a[i_47] = _5;
vector(2) int
analysis.c:22:26: note:   === vect_analyze_scalar_cycles ===
analysis.c:22:26: note:   Analyze phi: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   Access function of PHI: {1, +, 1}_4
analysis.c:22:26: note:   step: 1,  init: 1
analysis.c:22:26: note:   Detected induction.
analysis.c:22:26: note:   Analyze phi: .MEM_55 = PHI <.MEM_26(14), .MEM_11(12)>
analysis.c:22:26: note:   Analyze phi: ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>
analysis.c:22:26: note:   Access function of PHI: {1022, +, 4294967295}_4
analysis.c:22:26: note:   step: 4294967295,  init: 1022
analysis.c:22:26: note:   Detected induction.
analysis.c:22:26: note:   === vect_determine_precisions ===
analysis.c:22:26: note:   ivtmp_52 has no range info
analysis.c:22:26: note:   i_27 has range [0x2, 0x3ff]
analysis.c:22:26: note:   can narrow to unsigned:10 without loss of precision: i_27 = i_47 + 1;
analysis.c:22:26: note:   _5 has no range info
analysis.c:22:26: note:   _4 has range [0x0, 0x3fe]
analysis.c:22:26: note:   i_47 has range [0x1, 0x3ff]
analysis.c:22:26: note:   argc_25(D) has no range info
analysis.c:22:26: note:   === vect_pattern_recog ===
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   vect_is_simple_use: operand ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>, type of def: induction
analysis.c:22:26: note:   === vect_analyze_data_ref_accesses ===
analysis.c:22:26: note:   === vect_mark_stmts_to_be_vectorized ===
analysis.c:22:26: note:   init: phi relevant? i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   init: phi relevant? .MEM_55 = PHI <.MEM_26(14), .MEM_11(12)>
analysis.c:22:26: note:   init: phi relevant? ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>
analysis.c:22:26: note:   init: stmt relevant? _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   init: stmt relevant? _5 = a[_4];
analysis.c:22:26: note:   init: stmt relevant? a[i_47] = _5;
analysis.c:22:26: note:   vec_stmt_relevant_p: stmt has vdefs.
analysis.c:22:26: note:   mark relevant 5, live 0: a[i_47] = _5;
analysis.c:22:26: note:   init: stmt relevant? i_27 = i_47 + 1;
analysis.c:22:26: note:   init: stmt relevant? ivtmp_52 = ivtmp_54 - 1;
analysis.c:22:26: note:   init: stmt relevant? if (ivtmp_52 != 0)
analysis.c:22:26: note:   worklist: examine stmt: a[i_47] = _5;
analysis.c:22:26: note:   vect_is_simple_use: operand a[_4], type of def: internal
analysis.c:22:26: note:   mark relevant 5, live 0: _5 = a[_4];
analysis.c:22:26: note:   worklist: examine stmt: _5 = a[_4];
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 % argc_25(D), type of def: internal
analysis.c:22:26: note:   mark relevant 5, live 0: _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   worklist: examine stmt: _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   mark relevant 5, live 0: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   vect_is_simple_use: operand argc_25(D), type of def: external
analysis.c:22:26: note:   worklist: examine stmt: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 + 1, type of def: internal
analysis.c:22:26: note:   induction value on backedge.
analysis.c:22:26: note:   vect_is_simple_use: operand 1, type of def: constant
analysis.c:22:26: note:   === vect_analyze_data_ref_dependences ===
analysis.c:23:25: missed:   possible alias involving gather/scatter between a[_4] and a[i_47]
analysis.c:22:26: missed:  bad data dependence.
analysis.c:22:26: note:  ***** Analysis  failed with vector mode V8QI
analysis.c:22:26: note:  ***** Re-trying analysis with vector mode V4QI
analysis.c:22:26: note:   === vect_analyze_data_refs ===
analysis.c:22:26: note:   got vectype for stmt: _5 = a[_4];
vector(1) int
analysis.c:22:26: note:   got vectype for stmt: a[i_47] = _5;
vector(1) int
analysis.c:22:26: note:   === vect_analyze_scalar_cycles ===
analysis.c:22:26: note:   Analyze phi: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   Access function of PHI: {1, +, 1}_4
analysis.c:22:26: note:   step: 1,  init: 1
analysis.c:22:26: note:   Detected induction.
analysis.c:22:26: note:   Analyze phi: .MEM_55 = PHI <.MEM_26(14), .MEM_11(12)>
analysis.c:22:26: note:   Analyze phi: ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>
analysis.c:22:26: note:   Access function of PHI: {1022, +, 4294967295}_4
analysis.c:22:26: note:   step: 4294967295,  init: 1022
analysis.c:22:26: note:   Detected induction.
analysis.c:22:26: note:   === vect_determine_precisions ===
analysis.c:22:26: note:   ivtmp_52 has no range info
analysis.c:22:26: note:   i_27 has range [0x2, 0x3ff]
analysis.c:22:26: note:   can narrow to unsigned:10 without loss of precision: i_27 = i_47 + 1;
analysis.c:22:26: note:   _5 has no range info
analysis.c:22:26: note:   _4 has range [0x0, 0x3fe]
analysis.c:22:26: note:   i_47 has range [0x1, 0x3ff]
analysis.c:22:26: note:   argc_25(D) has no range info
analysis.c:22:26: note:   === vect_pattern_recog ===
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   vect_is_simple_use: operand ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>, type of def: induction
analysis.c:22:26: note:   === vect_analyze_data_ref_accesses ===
analysis.c:22:26: note:   === vect_mark_stmts_to_be_vectorized ===
analysis.c:22:26: note:   init: phi relevant? i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   init: phi relevant? .MEM_55 = PHI <.MEM_26(14), .MEM_11(12)>
analysis.c:22:26: note:   init: phi relevant? ivtmp_54 = PHI <ivtmp_52(14), 1022(12)>
analysis.c:22:26: note:   init: stmt relevant? _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   init: stmt relevant? _5 = a[_4];
analysis.c:22:26: note:   init: stmt relevant? a[i_47] = _5;
analysis.c:22:26: note:   vec_stmt_relevant_p: stmt has vdefs.
analysis.c:22:26: note:   mark relevant 5, live 0: a[i_47] = _5;
analysis.c:22:26: note:   init: stmt relevant? i_27 = i_47 + 1;
analysis.c:22:26: note:   init: stmt relevant? ivtmp_52 = ivtmp_54 - 1;
analysis.c:22:26: note:   init: stmt relevant? if (ivtmp_52 != 0)
analysis.c:22:26: note:   worklist: examine stmt: a[i_47] = _5;
analysis.c:22:26: note:   vect_is_simple_use: operand a[_4], type of def: internal
analysis.c:22:26: note:   mark relevant 5, live 0: _5 = a[_4];
analysis.c:22:26: note:   worklist: examine stmt: _5 = a[_4];
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 % argc_25(D), type of def: internal
analysis.c:22:26: note:   mark relevant 5, live 0: _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   worklist: examine stmt: _4 = i_47 % argc_25(D);
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 = PHI <i_27(14), 1(12)>, type of def: induction
analysis.c:22:26: note:   mark relevant 5, live 0: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   vect_is_simple_use: operand argc_25(D), type of def: external
analysis.c:22:26: note:   worklist: examine stmt: i_47 = PHI <i_27(14), 1(12)>
analysis.c:22:26: note:   vect_is_simple_use: operand i_47 + 1, type of def: internal
analysis.c:22:26: note:   induction value on backedge.
analysis.c:22:26: note:   vect_is_simple_use: operand 1, type of def: constant
analysis.c:22:26: note:   === vect_analyze_data_ref_dependences ===
analysis.c:23:25: missed:   possible alias involving gather/scatter between a[_4] and a[i_47]
analysis.c:22:26: missed:  bad data dependence.
analysis.c:22:26: note:  ***** Analysis  failed with vector mode V4QI
analysis.c:22:26: missed: couldn't vectorize loop
analysis.c:23:25: missed: possible alias involving gather/scatter between a[_4] and a[i_47]

Analyzing loop at analysis.c:10
analysis.c:10:26: note:  === analyze_loop_nest ===
analysis.c:10:26: note:   === vect_analyze_loop_form ===
analysis.c:10:26: note:    === get_loop_niters ===
analysis.c:10:26: note:   === vect_analyze_data_refs ===
analysis.c:10:26: note:   got vectype for stmt: a[i_44] = argc_25(D);
vector(4) int
analysis.c:10:26: note:   === vect_analyze_scalar_cycles ===
analysis.c:10:26: note:   Analyze phi: i_44 = PHI <i_33(17), 0(2)>
analysis.c:10:26: note:   Access function of PHI: {0, +, 1}_1
analysis.c:10:26: note:   step: 1,  init: 0
analysis.c:10:26: note:   Detected induction.
analysis.c:10:26: note:   Analyze phi: .MEM_49 = PHI <.MEM_32(17), .MEM_18(D)(2)>
analysis.c:10:26: note:   Analyze phi: ivtmp_37 = PHI <ivtmp_17(17), 1024(2)>
analysis.c:10:26: note:   Access function of PHI: {1024, +, 4294967295}_1
analysis.c:10:26: note:   step: 4294967295,  init: 1024
analysis.c:10:26: note:   Detected induction.
analysis.c:10:26: note:   === vect_determine_precisions ===
analysis.c:10:26: note:   ivtmp_17 has no range info
analysis.c:10:26: note:   i_33 has range [0x1, 0x400]
analysis.c:10:26: note:   can narrow to unsigned:11 without loss of precision: i_33 = i_44 + 1;
analysis.c:10:26: note:   === vect_pattern_recog ===
analysis.c:10:26: note:   vect_is_simple_use: operand i_44 = PHI <i_33(17), 0(2)>, type of def: induction
analysis.c:10:26: note:   vect_is_simple_use: operand i_44 = PHI <i_33(17), 0(2)>, type of def: induction
analysis.c:10:26: note:   vect_is_simple_use: operand ivtmp_37 = PHI <ivtmp_17(17), 1024(2)>, type of def: induction
analysis.c:10:26: note:   === vect_analyze_data_ref_accesses ===
analysis.c:10:26: note:   === vect_mark_stmts_to_be_vectorized ===
analysis.c:10:26: note:   init: phi relevant? i_44 = PHI <i_33(17), 0(2)>
analysis.c:10:26: note:   init: phi relevant? .MEM_49 = PHI <.MEM_32(17), .MEM_18(D)(2)>
analysis.c:10:26: note:   init: phi relevant? ivtmp_37 = PHI <ivtmp_17(17), 1024(2)>
analysis.c:10:26: note:   init: stmt relevant? a[i_44] = argc_25(D);
analysis.c:10:26: note:   vec_stmt_relevant_p: stmt has vdefs.
analysis.c:10:26: note:   mark relevant 5, live 0: a[i_44] = argc_25(D);
analysis.c:10:26: note:   init: stmt relevant? i_33 = i_44 + 1;
analysis.c:10:26: note:   init: stmt relevant? ivtmp_17 = ivtmp_37 - 1;
analysis.c:10:26: note:   init: stmt relevant? if (ivtmp_17 != 0)
analysis.c:10:26: note:   worklist: examine stmt: a[i_44] = argc_25(D);
analysis.c:10:26: note:   vect_is_simple_use: operand argc_25(D), type of def: external
analysis.c:10:26: note:   === vect_analyze_data_ref_dependences ===
analysis.c:10:26: note:   === vect_determine_vectorization_factor ===
analysis.c:10:26: note:   ==> examining phi: i_44 = PHI <i_33(17), 0(2)>
analysis.c:10:26: note:   ==> examining phi: .MEM_49 = PHI <.MEM_32(17), .MEM_18(D)(2)>
analysis.c:10:26: note:   ==> examining phi: ivtmp_37 = PHI <ivtmp_17(17), 1024(2)>
analysis.c:10:26: note:   ==> examining statement: a[i_44] = argc_25(D);
analysis.c:10:26: note:   precomputed vectype: vector(4) int
analysis.c:10:26: note:   nunits = 4
analysis.c:10:26: note:   ==> examining statement: i_33 = i_44 + 1;
analysis.c:10:26: note:   skip.
analysis.c:10:26: note:   ==> examining statement: ivtmp_17 = ivtmp_37 - 1;
analysis.c:10:26: note:   skip.
analysis.c:10:26: note:   ==> examining statement: if (ivtmp_17 != 0)
analysis.c:10:26: note:   skip.
analysis.c:10:26: note:   vectorization factor = 4
analysis.c:10:26: note:   === vect_compute_single_scalar_iteration_cost ===
analysis.c:10:26: note:   === vect_analyze_slp ===
analysis.c:10:26: note:   === vect_make_slp_decision ===
analysis.c:10:26: note:  vectorization_factor = 4, niters = 1024
analysis.c:10:26: note:   === vect_analyze_data_refs_alignment ===
analysis.c:10:26: note:   recording new base alignment for &a
  alignment:    16
  misalignment: 0
  based on:     a[i_44] = argc_25(D);
analysis.c:10:26: note:   vect_compute_data_ref_alignment:
analysis.c:10:26: missed:   misalign = 0 bytes of ref a[i_44]
analysis.c:10:26: note:   === vect_prune_runtime_alias_test_list ===
analysis.c:10:26: note:   === vect_enhance_data_refs_alignment ===
analysis.c:10:26: note:   vect_can_advance_ivs_p:
analysis.c:10:26: note:   Analyze phi: i_44 = PHI <i_33(17), 0(2)>
analysis.c:10:26: note:   Analyze phi: .MEM_49 = PHI <.MEM_32(17), .MEM_18(D)(2)>
analysis.c:10:26: note:   reduc or virtual phi. skip.
analysis.c:10:26: note:   Analyze phi: ivtmp_37 = PHI <ivtmp_17(17), 1024(2)>
analysis.c:10:26: note:   vect_model_store_cost: aligned.
analysis.c:10:26: note:   vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
analysis.c:10:26: note:   === vect_dissolve_slp_only_groups ===
analysis.c:10:26: note:   === vect_analyze_loop_operations ===
analysis.c:10:26: note:   examining phi: i_44 = PHI <i_33(17), 0(2)>
analysis.c:10:26: note:   examining phi: .MEM_49 = PHI <.MEM_32(17), .MEM_18(D)(2)>
analysis.c:10:26: note:   examining phi: ivtmp_37 = PHI <ivtmp_17(17), 1024(2)>
analysis.c:10:26: note:   ==> examining statement: a[i_44] = argc_25(D);
analysis.c:10:26: note:   vect_is_simple_use: operand argc_25(D), type of def: external
analysis.c:10:26: note:   vect_model_store_cost: aligned.
analysis.c:10:26: note:   vect_model_store_cost: inside_cost = 12, prologue_cost = 4 .
analysis.c:10:26: note:   ==> examining statement: i_33 = i_44 + 1;
analysis.c:10:26: note:   irrelevant.
analysis.c:10:26: note:   ==> examining statement: ivtmp_17 = ivtmp_37 - 1;
analysis.c:10:26: note:   irrelevant.
analysis.c:10:26: note:   ==> examining statement: if (ivtmp_17 != 0)
analysis.c:10:26: note:   irrelevant.
analysis.c:10:26: note:  operating only on full vectors.
analysis.c:10:26: note:  Cost model analysis: 
  Vector inside of loop cost: 12
  Vector prologue cost: 4
  Vector epilogue cost: 0
  Scalar iteration cost: 12
  Scalar outside cost: 0
  Vector outside cost: 4
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
analysis.c:10:26: note:    Runtime profitability threshold = 4
analysis.c:10:26: note:    Static estimate profitability threshold = 4
analysis.c:10:26: note:  ***** Analysis succeeded with vector mode V4SI
analysis.c:10:26: note:  ***** The result for vector mode V16QI would be the same
analysis.c:10:26: note:  ***** Choosing vector mode V4SI
analysis.c:10:26: optimized: loop vectorized using 16 byte vectors
analysis.c:10:26: note:  === vec_transform_loop ===
analysis.c:10:26: note:  ------>vectorizing phi: i_44 = PHI <i_33(17), 0(18)>
analysis.c:10:26: note:  ------>vectorizing phi: .MEM_49 = PHI <.MEM_32(17), .MEM_18(D)(18)>
analysis.c:10:26: note:  ------>vectorizing phi: ivtmp_37 = PHI <ivtmp_17(17), 1024(18)>
analysis.c:10:26: note:  ------>vectorizing statement: a[i_44] = argc_25(D);
analysis.c:10:26: note:  transform statement.
analysis.c:10:26: note:  vect_is_simple_use: operand argc_25(D), type of def: external
analysis.c:10:26: note:  transform store. ncopies = 1
analysis.c:10:26: note:  vect_get_vec_defs_for_operand: argc_25(D)
analysis.c:10:26: note:  vect_is_simple_use: operand argc_25(D), type of def: external
analysis.c:10:26: note:  created new init_stmt: vect_cst__50 = {argc_25(D), argc_25(D), argc_25(D), argc_25(D)};
analysis.c:10:26: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing an array ref: a
analysis.c:10:26: note:  created &a
analysis.c:10:26: note:  add new stmt: MEM <vector(4) int> [(int *)vectp_a.8_53] = vect_cst__50;
analysis.c:10:26: note:  ------>vectorizing statement: i_33 = i_44 + 1;
analysis.c:10:26: note:  ------>vectorizing statement: ivtmp_17 = ivtmp_37 - 1;
analysis.c:10:26: note:  ------>vectorizing statement: if (ivtmp_17 != 0)
analysis.c:10:26: note:  New loop exit condition: if (ivtmp_28 < 256)
analysis.c:10:26: note:  LOOP VECTORIZED

analysis.c:5:5: note: vectorized 1 loops in function.
analysis.c:15:22: missed: not vectorized: more than one data ref in stmt: MEM <unsigned char[4096]> [(char * {ref-all})&b] = MEM <unsigned char[4096]> [(char * {ref-all})&a];
analysis.c:19:24: missed: statement clobbers memory: __builtin_memmove (&a, _12, 4080);
analysis.c:28:17: missed: statement clobbers memory: printf ("%d ", _6);
analysis.c:29:17: missed: statement clobbers memory: printf ("%d ", _7);
analysis.c:31:9: missed: statement clobbers memory: __builtin_putchar (10);
analysis.c:5:5: note:  === vect_slp_analyze_bb ===
analysis.c:5:5: note:   === vect_analyze_data_refs ===
analysis.c:5:5: missed:   not vectorized: no vectype for stmt: MEM <vector(4) int> [(int *)vectp_a.8_53] = vect_cst__50;
 scalar_type: vector(4) int
analysis.c:5:5: note:   got vectype for stmt: _5 = a[_4];
vector(4) int
analysis.c:5:5: note:   got vectype for stmt: a[i_47] = _5;
vector(4) int
analysis.c:5:5: note:   got vectype for stmt: _6 = a[i_48];
vector(4) int
analysis.c:5:5: note:   got vectype for stmt: _7 = b[i_48];
vector(4) int
analysis.c:5:5: note:   === vect_analyze_data_ref_accesses ===
analysis.c:5:5: missed:   not consecutive access _5 = a[_4];
analysis.c:5:5: missed:   not consecutive access a[i_47] = _5;
analysis.c:5:5: missed:   not consecutive access _6 = a[i_48];
analysis.c:5:5: missed:   not consecutive access _7 = b[i_48];
analysis.c:5:5: missed:  not vectorized: no grouped stores in basic block.
analysis.c:5:5: note: ***** Analysis failed with vector mode V4SI
analysis.c:5:5: note: ***** Skipping vector mode V16QI, which would repeat the analysis for V4SI

Programm Output:
