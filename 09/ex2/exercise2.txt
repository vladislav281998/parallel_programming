Observations:
- Auto-Vectorization and OpenMP are nearly identical in performance.

Correctness Confirmation:
- Is the result still correct? Yes.

Findings on converting double to float precision:
- Execution time for the double precision version is notably longer than the single precision version. This is due to the increased CPU resource demand of double precision operations, which involve larger data sizes and more complex arithmetic.

Monitor specific hardware-related events:
-Event r1008 (Scalar SSE Single-Precision): Monitors single-precision scalar floating-point operations executed using SSE instructions.
-Event r1010 (SSE Double-Precision): Monitors double-precision floating-point operations executed using SSE instructions.
  
  Results for Float Implementation:
  -Scalar SSE Single-Precision (r1008): Count: 11,099 operations
  -> This suggests that the program performed a relatively low number of scalar SSE single-precision operations, indicating either limited use of these operations or highly efficient handling by the compiler and CPU.

  -SSE Double-Precision (r1010): Count: 1,024,241,596 operations
  -> The very high count here reflects extensive utilization of double-precision SSE operations. This is consistent with the program's operation, as it involves double-precision floating-point arithmetic (double data type) in a computationally intensive loop.

  Results for Double Implementation:
  -Scalar SSE Single-Precision (r1008): Count: 44,529 operations
  -> The program executed significantly more scalar single-precision operations compared to when using floats, and the total execution time also increased notably.

  -SSE Double-Precision (r1010): Count: 2,089,616,480 operations
  -> This shows a substantial increase in double-precision operations with a corresponding increase in execution time.

  Comparison and Analysis:
  -This increase in execution time is consistent with the greater computational complexity associated with double-precision arithmetic.
  -The usage of double-precision floating-point numbers has a clear performance impact, with longer execution times for both the scalar and vectorized operations. This is due to the increased precision and the larger data size of double (64-bit) compared to float (32-bit), which makes operations more resource-intensive.
  -The high count in r1010 indicates effective utilization of SSE instructions for double-precision calculations, which are critical for performance in numerical and scientific computing applications. 

Comparison with Exercise 1:
- How does the solution for this exercise compare to Exercise 1?
  Auto-Vectorization and OpenMP are nearly identical in performance.

Advantages and Disadvantages:
- Advantages: Better because you don't need compiler flags and you know which loops are vectorized.
- Disadvantages: None that we found.
